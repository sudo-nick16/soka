fn exit(code) {
	syscall(60, code);
}

fn print(s, n) {
	syscall(1, 1, s, n);
}

fn read(b, n) {
	syscall(0, 0, b, n);
}

fn letobe(num) {
	return (((num & 0xFF00) >> 8) | ((num & 0x00FF) << 8));
}

fn bind(socket_fd, sockaddr, sockaddr_len) {
	return syscall(49, socket_fd, sockaddr, sockaddr_len);
}

fn listen(socked_fd, queue_len) {
	return syscall(50, socked_fd, queue_len);
}

fn socket(domain, type, proto) {
	return syscall(41, domain, type, proto);
}

fn printb(s) {
	syscall(1, 1, s, 1);
}

fn memset(dest, value, n) {
	for i = 0; i < n; i += 1{
		dest[i] = value;
	}
}

fn shutdown(fd, opts) {
	return syscall(48, fd, opts);
}

fn write(fd, msg, len) {
	return syscall(1, fd, msg, len);
}

fn accept(fd, addr, addr_len) {
	return syscall(43, fd, addr, addr_len);
}

fn start_tcp_server(port) {
	let p = letobe(port);

	let fid = socket(2, 1, 0);

	if fid < 0 {
		print("could not create socket\n");
		return;
	}
	
	let addr[16] = 1;
	// sin_family
	addr[0] = 2;
	addr[1] = 0;

	// sin_port
	addr[2] = (p & 0xFF);
	addr[3] = ((p & 0xFF00) >> 8);

	// sin_adrr
	addr[4] = 0;
	addr[5] = 0;
	addr[6] = 0;
	addr[7] = 0;

	// padding to fit in with sockaddr struct
	for i = 8; i < 16; i += 1 {
		addr[i] = 0;
	}

	if bind(fid, addr, 16) != 0 {
		print("Could not bind\n");
		return;
	}

	if listen(fid, 10) != 0 {
		print("Could not listen\n");
		return;
	}

	print("Listening on PORT ");
	print_num(port);
	print("\n");

	let msg = "HTTP/1.1 200 OK\n\nhello world\n";
	let n = len(msg);

	let buf[16] = 0;

	while true {
		print("Waiting for the connection...\n");
 		let cid = accept(fid, buf, 16);
		if cid < 0 {
			print("this ain't a client");
			return;
		}
		if write(cid, msg, n) < 0 {
			print("Couldn't write to client!");
		}
		print("Closing connection\n");
		shutdown(cid, 2);
	}
}

// main is the entrypoint
fn main() {
	start_tcp_server(5000);
	exit(0);
}
